* Using Repertoire Assets as a Build Tool *

If you want to build your assets for use outside of ruby applications, you can
use the repertoire assets' rake tasks to generate a set of bundled standalone 
files.  First, import the rake tasks into your gem's Rakefile:

... [ ./Rakefile ]
begin
  require 'repertoire-assets'
  Repertoire::Assets::Tasks.new(:gem_excludes => ["jquery", ...])            # list any libraries to distribute separately here
rescue LoadError
  puts "Repertoire assets not available.  Install it with: sudo gem install repertoire-assets"
end
...

Then you can build a bundled and compressed directory of assets for your 
component with:

# rake assets:build

This gives you the flexibility of developing and deploying components that use
javascript dependencies and version management for use within ruby frameworks,
but also distributing your code for a wider audience.

The gem_excludes option allow you to list of required javascript libraries NOT to 
bundle into your distribution directory for legal reasons.  You may also supply
any of the other the other standard repertoire-assets options.

[ since the Rake tasks now require Rails, this use case is less useful ]


/* Repertoire gem assets manifest file */
(function() {
  
  function require_js(src, callback) {
    var script = document.createElement("script"),
        head   = document.getElementsByTagName("head")[0],
        done   = false;
    script.type = "text/javascript";
    script.language = "javascript"; 
    script.src = src;
    if (callback) {
      script.onload = script.onreadystatechange = function() {
        if (!done && (!this.readyState || this.readyState == "loaded" || this.readyState == "complete")) {
          done = true; 
          callback();
          head.removeChild(script);
        }
      }
    }
    head.appendChild(script);
  }
  
  function require_css(href) {
    var link = document.createElement("link");
    link.type = "text/css"; 
    link.rel = "stylesheet"; 
    link.href = href;
    document.getElementsByTagName("head")[0].appendChild(link);
  }
  
  function depend_js(list) {
    if (list.length > 0) {
      var src = list.shift();
      require_js(src, function() {
        depend_js(list);
      });
    }
    return list;
  };

  <% manifest.grep(/\.css$/) do |uri| -%>
  require_css('<%= uri %>');
  <% end -%>

  var list = depend_js(<%= manifest.grep(/\.js$/).to_json %>);
  
  while (list.length > 0) { /* block until loads finish */ }
})();




Possible regexp for matching HTML documents 

/(\s*<\s*!DOCTYPE[^>]*>)?\s*<\s*HTML[^>]*>\s*<\s*HEAD[^>]*>/i



path = case pathspec
when %r{^"(.*?)?(\.js|\.css)?"$}         then path.dirname  + $1 + ($3 || '.js')
when %r{^<([^/>]*)(.*?)?(\.js|\.css)?>$} then libraries[$1] + $2 + ($3 || '.js')
else raise PreprocessingError, "Unkown path format: #{pathspec}"






# //= require <foo>
if [lib, subpath] = line[/^\s*\/\/=\s+require\s+<([^/>]*)(/[^>]*)?>\s*$/, 1]
  path_lint(libraries[lib] + subpath, "<#{lib}>", path, line_num) do |p|
    requires(p, indent)
  end
# //= require "foo" or //= require "foo.css"
elsif subpath = line[/^\s*\/\/=\s+require\s+\"(.*?)\"\s*$/, 1]
  subpath += '.js' unless subpath[/\.(js|css)$/]
  path_lint(path.dirname + subpath, "\"#{subpath}\"", path, line_num) do |p| 
    requires(p, indent)
  end
# //= provide "../assets"
elsif subpath = line[/^\s*\/\/=\s+provide\s+\"(.*?)\"\s*$/, 1]
  path_lint(path.dirname + subpath, "\"#{subpath}\"", path, line_num) do |p|
    provides(p, indent)
  end
end